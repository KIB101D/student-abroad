/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫—É –ø—Ä–æ–≥—Ä–∞–º
 */
export function initProgramSearch() {
    initSearchRedirect();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ search.html
    if (window.location.pathname.includes('search.html')) {
        document.body.classList.add('search-page');
        processSearchPage();

        document.addEventListener('DOMContentLoaded', () => {
            const cards = document.querySelectorAll('.program-card');
            cards.forEach(card => {
                card.style.display = 'flex';
            });
        });
    }
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ –ø–æ—à—É–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
 */
function initSearchRedirect() {
    const searchInputs = document.querySelectorAll('.search-box__input, .footer__search-box .search-box__input');

    searchInputs.forEach(input => {
        input.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                const searchQuery = this.value.trim();
                if (searchQuery) {
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ search.html –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ—à—É–∫—É
                    window.location.href = `search.html?q=${encodeURIComponent(searchQuery)}`;
                }
            }
        });
    });
}

/**
 * –û–±—Ä–æ–±–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—à—É–∫—É
 */
function processSearchPage() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('q');

    if (!searchQuery) {
        displayNoResults();
        return;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–∏
    loadAndFilterPrograms(searchQuery);
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º
 */
function loadAndFilterPrograms(searchQuery) {
    fetch('program-list.html')
        .then(response => {
            if (!response.ok) {
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º');
            }
            return response.text();
        })
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const programCards = doc.querySelectorAll('.program-card');

            const filteredPrograms = filterPrograms(programCards, searchQuery);

            // üü¢ –î–û–î–ê–ù–û: –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∏–ª—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–≤—ñ—Ç—å —É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∞—Ö
            filteredPrograms.forEach(card => {
                card.style.display = 'flex';
            });

            displayResults(filteredPrograms, searchQuery);
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º:', error);
            displayErrorMessage();
        });
}

/**
 * –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
 */
function filterPrograms(programCards, searchQuery) {
    const filtered = [];
    const query = searchQuery.toLowerCase().trim();

    programCards.forEach(card => {
        const cardText = card.textContent.toLowerCase();
        const hasMatch = cardText.includes(query);

        const dataAttributes = card.querySelectorAll('[data-ua], [data-en]');
        let dataMatch = false;

        dataAttributes.forEach(element => {
            const uaText = element.getAttribute('data-ua')?.toLowerCase() || '';
            const enText = element.getAttribute('data-en')?.toLowerCase() || '';

            if (uaText.includes(query) || enText.includes(query)) {
                dataMatch = true;
            }
        });

        if (hasMatch || dataMatch) {
            filtered.push(card.cloneNode(true));
        }
    });

    return filtered;
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
 */
function displayResults(programs, searchQuery) {
    const mainElement = document.querySelector('main');

    if (programs.length === 0) {
        displayNoResults(searchQuery);
        return;
    }

    const resultsContainer = document.createElement('section');
    resultsContainer.className = 'search-results';
    resultsContainer.innerHTML = `
        <div class="container">
            <h1 class="search-results__title" 
                data-en="Search results for: \\"${searchQuery}\\""
                data-ua="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è: \\"${searchQuery}\\"">
                Search results for: "${searchQuery}"
            </h1>
            <p class="search-results__count" 
               data-en="Found ${programs.length} programs"
               data-ua="–ó–Ω–∞–π–¥–µ–Ω–æ ${programs.length} –ø—Ä–æ–≥—Ä–∞–º">
               Found ${programs.length} programs
            </p>
            <div class="program-list"></div>
        </div>
    `;

    const programList = resultsContainer.querySelector('.program-list');

    programs.forEach(program => {
        const highlightedProgram = highlightSearchTerm(program, searchQuery);
        programList.appendChild(highlightedProgram);
    });

    mainElement.appendChild(resultsContainer);

    // üü¢ –î–û–î–ê–ù–û: –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –¥–æ–¥–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è
    const visibleCards = resultsContainer.querySelectorAll('.program-card');
    visibleCards.forEach(card => {
        card.style.display = 'flex';
    });

    if (window.updateLanguage) {
        window.updateLanguage();
    }
}

/**
 * –í–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∂–æ–≤—Ç–∏–º –∫–æ–ª—å–æ—Ä–æ–º
 */
function highlightSearchTerm(programElement, searchQuery) {
    const query = searchQuery.toLowerCase();
    const elements = programElement.querySelectorAll('h2, p, span');

    elements.forEach(element => {
        if (element.textContent.toLowerCase().includes(query)) {
            highlightTextInElement(element, query);
        }

        if (element.hasAttribute('data-ua')) {
            const uaText = element.getAttribute('data-ua');
            if (uaText.toLowerCase().includes(query)) {
                element.setAttribute('data-ua', highlightText(uaText, query));
            }
        }

        if (element.hasAttribute('data-en')) {
            const enText = element.getAttribute('data-en');
            if (enText.toLowerCase().includes(query)) {
                element.setAttribute('data-en', highlightText(enText, query));
            }
        }
    });

    return programElement;
}

/**
 * –í–∏–¥—ñ–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤ –µ–ª–µ–º–µ–Ω—Ç—ñ
 */
function highlightTextInElement(element, query) {
    const text = element.textContent;
    const highlightedHtml = highlightText(text, query);

    const dataAttributes = {};
    for (let attr of element.attributes) {
        if (attr.name.startsWith('data-')) {
            dataAttributes[attr.name] = attr.value;
        }
    }

    element.innerHTML = highlightedHtml;
    Object.keys(dataAttributes).forEach(attr => {
        element.setAttribute(attr, dataAttributes[attr]);
    });
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
 */
function highlightText(text, query) {
    const regex = new RegExp(`(${escapeRegex(query)})`, 'gi');
    return text.replace(regex, '<mark class="search-highlight">$1</mark>');
}

/**
 * –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è regex
 */
function escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 */
function displayNoResults(searchQuery = '') {
    const mainElement = document.querySelector('main');
    mainElement.innerHTML = `
        <section class="search-results">
            <div class="container">
                <h1 class="search-results__title" 
                    data-en="No results found"
                    data-ua="–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ">
                    No results found
                </h1>
                ${searchQuery ? `
                <p class="search-results__message"
                   data-en="No programs found for: \\"${searchQuery}\\""
                   data-ua="–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º –¥–ª—è: \\"${searchQuery}\\"">
                   No programs found for: "${searchQuery}"
                </p>
                ` : ''}
                <a href="program-list.html" class="btn search-results__back-btn"
                   data-en="Back to all programs"
                   data-ua="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Å—ñ—Ö –ø—Ä–æ–≥—Ä–∞–º">
                   Back to all programs
                </a>
            </div>
        </section>
    `;
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function displayErrorMessage() {
    const mainElement = document.querySelector('main');
    mainElement.innerHTML = `
        <section class="search-results">
            <div class="container">
                <h1 class="search-results__title" 
                    data-en="Error loading programs"
                    data-ua="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º">
                    Error loading programs
                </h1>
                <p class="search-results__message"
                   data-en="Please try again later"
                   data-ua="–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ">
                   Please try again later
                </p>
            </div>
        </section>
    `;
}
